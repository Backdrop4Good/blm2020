<?php
/**
 * @file
 * BLM Memphis module to create maps pages.
 */

/**
 * Implements hook_menu().
 */
function blm2020_map_menu() {
  $items = array();
  $items['businesses'] = array(
    'title' => t('Search Businesses'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('blm2020_map_form'), 
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Generate the markup for the leaflet map.
 *
 * @see blm2020_map_form().
 */
function blm2020_map_view($form, &$form_state) {

  // Provide the div for leaflet to inject the map into.
  $markup = '<div id="mapid"></div>';

  $businesses = db_select('node', 'n');
  $businesses->join('field_data_field_lattitude', 'flat', 'n.nid = flat.entity_id');
  $businesses->join('field_data_field_longitude', 'flon', 'n.nid = flon.entity_id');
  
  // See if the user has provided a search term.
  $term = (!empty($form_state['input']['search'])) ? $form_state['input']['search'] : '';
  $all_businesses = $businesses
    ->fields('n', array('nid', 'title'))
    ->fields('flat', array('field_lattitude_value'))
    ->fields('flon', array('field_longitude_value'))
      ->addTag('node_access')
      ->condition('n.type', 'business')
      ->condition('n.status', 1)
      ->condition('n.title', '%' . db_like($term) . '%', 'LIKE')
      ->execute()
      ->fetchAll();
  
  // Add in the css.
  backdrop_add_css(backdrop_get_path('module', 'blm2020_map') . '/css/blm2020_map.css');

  $markup .= '
    <script>
      var mymap = L.map(\'mapid\').setView([35.1095, -90.0490], 11);

      L.tileLayer(\'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}\', {
        attribution: \'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>\',
        maxZoom: 18,
        id: \'mapbox.streets\',
        accessToken: \'pk.eyJ1Ijoic2VydW5kZXB1dHkiLCJhIjoiY2pjejJjcHRiMTB6cTJ4bzFsMTI0MWNhcSJ9.qJgR6b-sWntEq9zkV5zX0g\'
      }).addTo(mymap);
    ';

  foreach ($all_businesses as $index => $business) {
    $ahref = "<a href='/node/" . $business->nid . "'>More info</a>";
    $markup .= "var marker$index = L.marker([$business->field_lattitude_value, $business->field_longitude_value]).addTo(mymap);";
    $markup .= "marker$index.bindPopup(\"<b>$business->title</b><br>$ahref\").openPopup();";
  }

  $markup .= "mymap.scrollWheelZoom.disable();";
  $markup .= '</script>';

  return $markup;
}

/**
 * BML Map search form.
 */
function blm2020_map_form($form, &$form_state) {
  $form = array();
  $form['search'] = array(
    '#type' => 'textfield',
    '#description' => t('Search by title of the business.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['map'] = array(
    '#markup' => blm2020_map_view($form, $form_state),
  );


  return $form;
}

function blm2020_map_form_validate($form, &$form_state) {
}

function blm2020_map_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_form_alter()
 *
 * Get POINT(lat, lon) from Google Maps API geocoding.
 * Example request:
 *   - https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=YOUR_API_KEY
 */
function blm2020_map_form_business_node_form_alter(&$form, &$form_state) {
  //global $settings;
  $url = "https://maps.googleapis.com/maps/api/geocode/json?address=";
  //dpm($form['#form_id']);
  //dpm($form_state, 'form_state');
  $street = $form['field_business_address']['und'][0]['#address']['thoroughfare'];
  $city = $form['field_business_address']['und'][0]['#address']['locality'];
  $state = $form['field_business_address']['und'][0]['#address']['administrative_area'];
  if (!empty($street)) {
    $street = str_replace(' ', '+', $street);
    $url .= $street;
  }
  if (!empty($city)) {
    $url .= "+$city";
  }
  if (!empty($state)) {
    $url .= "+$state";
  }
  //$token = $settings['githubapi_token'];
  //$authorization = "Authorization: token $token";

  // Only make the request if we have some parameters.
  if (!empty($street) || !empty($city) || !empty($state)) {
    // Initiate a curl session.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json')); //, $authorization));
    curl_setopt ($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
    $content = curl_exec($ch);
    curl_close($ch);
    $json = json_decode($content);
    //dpm($json, 'json response');
  
    //dpm($json->results[0]->geometry->location->lat);
    $lat = $json->results[0]->geometry->location->lat;
    $lng = $json->results[0]->geometry->location->lng;
  }
  // @todo  geofield is shyte take it off of the `business` content type and add text field to pass to leaflet.
  //if (!empty($lat) && !empty($lon)) {
    $form['field_lattitude']['und'][0]['value']['#value'] = $lat;
    $form['field_longitude']['und'][0]['value']['#value'] = $lng;
  //}
  //dpm($form, 'form');
  $form['field_lattitude']['#disabled'] = TRUE;
  $form['field_longitude']['#disabled'] = TRUE;
}
