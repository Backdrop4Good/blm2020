<?php
/**
 * @file
 * BLM Memphis module to create maps pages.
 */

/**
 * Implements hook_menu().
 */
function blm2020_map_menu() {
  $items = array();
  $items['businesses'] = array(
    'title' => t('Search Businesses'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('blm2020_map_form'), 
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Generate the markup for the leaflet map.
 *
 * @see blm2020_map_form().
 */
function blm2020_map_view($form, &$form_state) {

  // Provide the div for leaflet to inject the map into.
  $markup = '<div id="mapid"></div>';

  $businesses = db_select('node', 'n');
  $businesses->join('field_data_field_lattitude', 'flat', 'n.nid = flat.entity_id');
  $businesses->join('field_data_field_longitude', 'flon', 'n.nid = flon.entity_id');
  
  // See if the user has provided a search term.
  $term = (!empty($form_state['input']['search'])) ? $form_state['input']['search'] : '';
  $all_businesses = $businesses
    ->fields('n', array('nid', 'title'))
    ->fields('flat', array('field_lattitude_value'))
    ->fields('flon', array('field_longitude_value'))
      ->addTag('node_access')
      ->condition('n.type', 'business')
      ->condition('n.status', 1)
      ->condition('n.title', '%' . db_like($term) . '%', 'LIKE')
      ->execute()
      ->fetchAll();
  
  // Add in the css.
  backdrop_add_css(backdrop_get_path('module', 'blm2020_map') . '/css/blm2020_map.css');

  $markup .= '
    <script>
      var mymap = L.map(\'mapid\').setView([35.1095, -90.0490], 11);

      L.tileLayer(\'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}\', {
        attribution: \'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>\',
        maxZoom: 18,
        id: \'mapbox.streets\',
        accessToken: \'pk.eyJ1Ijoic2VydW5kZXB1dHkiLCJhIjoiY2pjejJjcHRiMTB6cTJ4bzFsMTI0MWNhcSJ9.qJgR6b-sWntEq9zkV5zX0g\'
      }).addTo(mymap);
    ';

  foreach ($all_businesses as $index => $business) {
    $ahref = "<a href='/node/" . $business->nid . "'>More info</a>";
    $markup .= "var marker$index = L.marker([$business->field_lattitude_value, $business->field_longitude_value]).addTo(mymap);";
    $markup .= "marker$index.bindPopup(\"<b>$business->title</b><br>$ahref\").openPopup();";
  }

  $markup .= "mymap.scrollWheelZoom.disable();";
  $markup .= '</script>';

  return $markup;
}

/**
 * BML Map search form.
 */
function blm2020_map_form($form, &$form_state) {
  $form = array();
  $form['search'] = array(
    '#type' => 'textfield',
    '#description' => t('Search by title of the business.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['map'] = array(
    '#markup' => blm2020_map_view($form, $form_state),
  );


  return $form;
}

/**
 * Submit handler for blm2020_map_form().
 */
function blm2020_map_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_form_alter()
 */
function blm2020_map_form_business_node_form_alter(&$form, &$form_state) {
  $form['field_lattitude']['#disabled'] = TRUE;
  $form['field_longitude']['#disabled'] = TRUE;
}

/**
 * Get coordinates of location from address.
 *
 * @param string $street 
 *   Street address.
 *
 * @param sting $city
 *   City.
 *
 * @param string $state
 *   State.    
 *
 * Get POINT(lat, lon) from Google Maps API geocoding.
 * Example request:
 *   - https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=YOUR_API_KEY
 *
 * @return array
 *   Either an empty array or the $lat and $lng if the request returned them.
 */
function blm2020_map_geocode_address($street, $city, $state) {
  $url = "https://maps.googleapis.com/maps/api/geocode/json?address=";
  if (!empty($street)) {
    $street = str_replace(' ', '+', $street);
    $url .= $street;
  }
  if (!empty($city)) {
    $url .= "+$city";
  }
  if (!empty($state)) {
    $url .= "+$state";
  }
  //$token = $settings['githubapi_token'];
  //$authorization = "Authorization: token $token";

  // Only make the request if we have some parameters.
  if (!empty($street) || !empty($city) || !empty($state)) {
    // Initiate a curl session.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json')); //, $authorization));
    curl_setopt ($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
    $content = curl_exec($ch);
    curl_close($ch);
    $json = json_decode($content);

    $lat = $json->results[0]->geometry->location->lat;
    $lng = $json->results[0]->geometry->location->lng;

    return array($lat, $lng);
  }

  return array();
}

/**
 * Implements hook_node_presave().
 */
function blm2020_map_node_presave($node) {
  if ($node->type == 'business') {
    $coordinates = blm2020_map_geocode_address(
      $node->field_business_address['und'][0]['thoroughfare'],
      $node->field_business_address['und'][0]['locality'],
      $node->field_business_address['und'][0]['administrative_area']
    );
    if (!empty($coordinates)) {
      $node->field_lattitude[LANGUAGE_NONE][0]['value'] = $coordinates[0];
      $node->field_longitude[LANGUAGE_NONE][0]['value'] = $coordinates[1];
    }
  }
}


/**
 * CiviCRM implmentation of the map is below, in block form.
 *
 * Geocoding happens automatically in CiviCRM so we can just pull 
 * lat and long from there.
 *
 */
 
function blm2020_map_block_info() {
  $blocks['blm2020_map_mapblock'] = array(
    'info' => t('BLM Memphis Black Business Directory Map (Mapbox)'),
  );
  return $blocks;
}
 
/**
 * Implementation of hook_block_view().
 */
function blm2020_map_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'blm2020_map_mapblock':
      $block['subject'] = t('BLM Memphis Black Business Directory Map (Mapbox)');
      $block['content'] = _blm2020_map_mapblock_view( );
      break;
  }
  return $block;
}
 
/**
 * Pull data from CiviCRM and display in map.
 */
function _blm2020_map_mapblock_view() {
  // Default: don't display the entire directory on the map, only show if a category is chosen.
  $businesses = NULL;
  $markup = '';
  if (module_exists('civicrm')) {
    civicrm_initialize();
    // Provide the div for leaflet to inject the map into.
    $markup = '<div id="mapid"></div>';
    
    $exposed_filters = array();
    if (isset($_GET['cat'])) {
      $exposed_filters['cat'] = check_plain($_GET['cat']);
    }
    if (isset($_GET['keyword'])) {
      $exposed_filters['keyword'] = check_plain($_GET['keyword']);
    }
    $view = views_get_view('businesses');
    $view->set_display('page');
    $view->set_exposed_input($exposed_filters);
    $view->init_display();
    $view->pre_execute();
    $view->execute();
    $result = $view->result;
    debug($result);
  
    $criteria = array(
      'sequential' => 1,
      'return' => ["custom_1", "display_name", "geo_code_1", "geo_code_2"],
      'contact_type' => "Organization",
      'contact_sub_type' => "Black_Owned_Business",
      'is_deleted' => 0,
      'options' => ['limit' => 2000],
    );
    
    // See if the user has provided a search term.
    if (isset($_GET['cat'])) {
      $criteria['custom_9'] = check_plain($_GET['cat']);
      if (is_numeric($criteria['custom_9'])) {
        $businesses = civicrm_api3('Contact', 'get', $criteria);
      }
    } 
    
    // Add in the css.
    backdrop_add_css(backdrop_get_path('module', 'blm2020_map') . '/css/blm2020_map.css');
  
    $markup .= '
      <script src="https://api.mapbox.com/mapbox.js/v3.1.1/mapbox.js"></script>
      <link href="https://api.mapbox.com/mapbox.js/v3.1.1/mapbox.css" rel="stylesheet" />
      <script>
        var mymap = L.map(\'mapid\').setView([35.1095, -90.0490], 11);
  
        L.tileLayer(\'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}\', {
          attribution: \'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>\',
          maxZoom: 18,
          id: \'mapbox.streets\',
          accessToken: \'pk.eyJ1Ijoic2VydW5kZXB1dHkiLCJhIjoiY2pjejJjcHRiMTB6cTJ4bzFsMTI0MWNhcSJ9.qJgR6b-sWntEq9zkV5zX0g\'
        }).addTo(mymap);
      ';

    
    foreach($businesses['values'] as $index => $business) {
      $latitude = $business['geo_code_1'];
      $longitude = $business['geo_code_2'];
      $business_name = addslashes($business['display_name']);
      $description = addslashes($business['custom_1']);
      $description = preg_replace( "/\r|\n/", "", $description );
      $markup .= "var marker$index = L.marker([$latitude, $longitude]).addTo(mymap);";
      $markup .= "marker$index.bindPopup(\"<h3>$business_name</h3>$description\", {
          maxWidth : 480,
          maxHeight : 320
      });";
    }
    $markup .= "mymap.scrollWheelZoom.disable();";
    $markup .= '</script>';
  }

  return $markup;
}